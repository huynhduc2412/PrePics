// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrePics.Models;

#nullable disable

namespace PrePics.Migrations
{
    [DbContext(typeof(PrePicsDbContext))]
    partial class PrePicsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PrePics.Models.Collection", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("dateCreate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateCreate");

                    b.Property<bool>("isPublic")
                        .HasColumnType("bit")
                        .HasColumnName("IsPublict");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Collection");
                });

            modelBuilder.Entity("PrePics.Models.Gallery", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("dateUpload")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateUpload");

                    b.Property<int>("download")
                        .HasColumnType("int")
                        .HasColumnName("Downloads");

                    b.Property<int>("height")
                        .HasColumnType("int")
                        .HasColumnName("Height");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageUrl");

                    b.Property<bool>("isPublic")
                        .HasColumnType("bit")
                        .HasColumnName("IsPublic");

                    b.Property<int>("liked")
                        .HasColumnType("int")
                        .HasColumnName("Liked");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Location");

                    b.Property<int>("views")
                        .HasColumnType("int")
                        .HasColumnName("Views");

                    b.Property<int>("width")
                        .HasColumnType("int")
                        .HasColumnName("Width");

                    b.HasKey("id");

                    b.ToTable("Gallery");
                });

            modelBuilder.Entity("PrePics.Models.GotTag", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("galleryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("tagId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("galleryId");

                    b.HasIndex("tagId");

                    b.ToTable("GotTag");
                });

            modelBuilder.Entity("PrePics.Models.InCollection", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("collectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("galleryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("collectionId");

                    b.HasIndex("galleryId");

                    b.ToTable("InCollection");
                });

            modelBuilder.Entity("PrePics.Models.Tag", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("PrePics.Models.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<string>("discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Discription");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("instagramUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Instagram");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<string>("twitterUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TwitterUrl");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserName");

                    b.Property<string>("websiteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WebsiteUrl");

                    b.HasKey("id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PrePics.Models.Collection", b =>
                {
                    b.HasOne("PrePics.Models.User", "user")
                        .WithMany("collections")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("PrePics.Models.GotTag", b =>
                {
                    b.HasOne("PrePics.Models.Gallery", "gallery")
                        .WithMany("gotTags")
                        .HasForeignKey("galleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrePics.Models.Tag", "tag")
                        .WithMany("gotTags")
                        .HasForeignKey("tagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("gallery");

                    b.Navigation("tag");
                });

            modelBuilder.Entity("PrePics.Models.InCollection", b =>
                {
                    b.HasOne("PrePics.Models.Collection", "collection")
                        .WithMany()
                        .HasForeignKey("collectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrePics.Models.Gallery", "gallery")
                        .WithMany("inCollections")
                        .HasForeignKey("galleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("collection");

                    b.Navigation("gallery");
                });

            modelBuilder.Entity("PrePics.Models.Gallery", b =>
                {
                    b.Navigation("gotTags");

                    b.Navigation("inCollections");
                });

            modelBuilder.Entity("PrePics.Models.Tag", b =>
                {
                    b.Navigation("gotTags");
                });

            modelBuilder.Entity("PrePics.Models.User", b =>
                {
                    b.Navigation("collections");
                });
#pragma warning restore 612, 618
        }
    }
}
